% Segmentation of multivariate time series with a Multiple Hidden Markov Model Regression MHMMR).
%
%
% Multiple Hidden Markov Model Regression (HMMR) for segmentation of multivariate time series
% with regime changes. The model assumes that the time series is
% governed by a sequence of hidden discrete regimes/states, where each
% regime/state has Gaussian regressors as observations.
% The model parameters are estimated by MLE via the EM algorithm
%
% Faicel Chamroukhi
%
%% Please cite the following papers for this code:
%
% 
% @article{Chamroukhi-FDA-2018,
%  	Journal = {Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery},
%  	Author = {Faicel Chamroukhi and Hien D. Nguyen},
%  	Note = {DOI: 10.1002/widm.1298.},
%  	Volume = {},
%  	Title = {Model-Based Clustering and Classification of Functional Data},
%  	Year = {2019},
%  	Month = {to appear},
%  	url =  {https://chamroukhi.com/papers/MBCC-FDA.pdf}
% }
% 
% @InProceedings{Chamroukhi-IJCNN-2011,
%   author = {F. Chamroukhi and A. Sam\'e  and P. Aknin and G. Govaert},
%   title = {Model-based clustering with Hidden Markov Model regression for time series with regime changes},
%   Booktitle = {Proceedings of the International Joint Conference on Neural Networks (IJCNN), IEEE},
%   Pages = {2814--2821},
%   Adress = {San Jose, California, USA},
%   year = {2011},
%   month = {Jul-Aug},
%   url = {https://chamroukhi.com/papers/Chamroukhi-ijcnn-2011.pdf}
% }
% 
% 
% Faicel Chamroukhi (since 2010).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all;
close all;
clc

% model specification
K = 5; % nomber of regimes (states)
p = 3; % dimension of beta' (order of the polynomial regressors)

% options
%type_variance = 'homoskedastic';
type_variance = 'hetereskedastic';
nbr_EM_tries = 1;
max_iter_EM = 1500;
threshold = 1e-6;
verbose = 1;
type_algo = 'EM';
% type_algo = 'CEM';
% type_algo = 'SEM';

%% toy time series with regime changes
% y =[randn(100,1); 7+randn(120,1);4+randn(200,1); -2+randn(100,1); 3.5+randn(150,1);]';
% n = length(y);
% x = linspace(0,1,n);

load simulated_time_series;
%load real_time_series_1

MHMMR = learn_mhmmr(x, y, K, p, type_variance, nbr_EM_tries, max_iter_EM, threshold, verbose);

%     %if model selection
%     current_BIC = -inf;
%     for K=1:8
%         for p=0:4
%             MHMMR_Kp = learn_hmmr(x, y, K, p, type_variance, nbr_EM_tries, max_iter_EM, threshold, verbose)
% 
%             if MHMMR_Kp.stats.BIC>current_BIC
%                 MHMMR=MHMMR_Kp;
%                 current_BIC = MHMMR_Kp.stats.BIC;
%             end
%                 bic(K,p+1) = MHMMR_Kp.stats.BIC;
%         end
%     end
show_HMMR_results(x,y, MHMMR)


load real_time_series_1
%load real_time_series_2

MHMMR = learn_mhmmr(x, y, K, p, type_variance, nbr_EM_tries, max_iter_EM, threshold, verbose);
yaxislim= [240 600];
show_HMMR_results(x,y, MHMMR, yaxislim)


% sample an MHMMR
%[y, states, Z, mean_function] = sample_mhmmr(x, MHMMR.prior, HMMR.trans_mat, HMMR.reg_param.betak,HMMR.reg_param.sigma2k);

